diff --git a/node_modules/@observablehq/framework/dist/client/preview.js b/node_modules/@observablehq/framework/dist/client/preview.js
index 38ed070..53af533 100644
--- a/node_modules/@observablehq/framework/dist/client/preview.js
+++ b/node_modules/@observablehq/framework/dist/client/preview.js
@@ -7,10 +7,10 @@ let minReopenDelay = 1e3;
 let maxReopenDelay = 3e4;
 let reopenDelay = minReopenDelay;
 let reopenDecay = 1.1;
-function open({ hash, eval: compile } = {}) {
+function open({ hash, base, eval: compile } = {}) {
   let opened = false;
   const socket = new WebSocket(
-    Object.assign(new URL("/_observablehq", location.href), {
+    Object.assign(new URL(`${base}_observablehq`, location.href), {
       protocol: location.protocol === "https:" ? "wss" : "ws"
     })
   );
@@ -18,7 +18,7 @@ function open({ hash, eval: compile } = {}) {
     console.info("socket open");
     opened = true;
     reopenDelay = minReopenDelay;
-    send({ type: "hello", path: location.pathname, hash });
+    send({ type: "hello", path: location.pathname.substring(base.length-1), hash });
   };
   socket.onmessage = async (event) => {
     const message = JSON.parse(event.data);
@@ -157,7 +157,7 @@ function open({ hash, eval: compile } = {}) {
     if (opened)
       console.info("socket close");
     reopenDelay = Math.min(maxReopenDelay, reopenDelay * reopenDecay);
-    setTimeout(() => open({ hash, eval: compile }), reopenDelay);
+    setTimeout(() => open({ hash, base, eval: compile }), reopenDelay);
   };
   function indexCells(map, node) {
     for (const [id, root] of findRoots(node)) {
diff --git a/node_modules/@observablehq/framework/dist/render.js b/node_modules/@observablehq/framework/dist/render.js
index d7bc6f1..7825461 100644
--- a/node_modules/@observablehq/framework/dist/render.js
+++ b/node_modules/@observablehq/framework/dist/render.js
@@ -43,7 +43,7 @@ ${registerFiles(
   )}` : ""}${data?.sql ? `
 ${registerTables(data.sql, options)}` : ""}
 ${preview ? `
-open({hash: ${JSON.stringify(resolvers.hash)}, eval: (body) => eval(body)});
+open({hash: ${JSON.stringify(resolvers.hash)}, base: ${JSON.stringify(base)}, eval: (body) => eval(body)});
 ` : ""}${page.code.map(({ node, id, mode }) => `
 ${transpileJavaScript(node, { id, path, mode, resolveImport })}`).join("")}`)}
 </script>${sidebar ? html`\n${await renderSidebar(options, resolvers.resolveLink)}` : ""}${toc.show ? html`\n${renderToc(findHeaders(page), toc.label)}` : ""}
