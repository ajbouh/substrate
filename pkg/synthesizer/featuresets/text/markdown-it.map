{"version":3,"file":"index.js","sources":["../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/common/entities.js","../node_modules/.pnpm/uc.micro@1.0.6/node_modules/uc.micro/categories/P/regex.js","../node_modules/.pnpm/mdurl@1.0.1/node_modules/mdurl/encode.js","../node_modules/.pnpm/mdurl@1.0.1/node_modules/mdurl/decode.js","../node_modules/.pnpm/mdurl@1.0.1/node_modules/mdurl/parse.js","../node_modules/.pnpm/mdurl@1.0.1/node_modules/mdurl/index.js","../node_modules/.pnpm/mdurl@1.0.1/node_modules/mdurl/format.js","../node_modules/.pnpm/uc.micro@1.0.6/node_modules/uc.micro/properties/Any/regex.js","../node_modules/.pnpm/uc.micro@1.0.6/node_modules/uc.micro/categories/Cc/regex.js","../node_modules/.pnpm/uc.micro@1.0.6/node_modules/uc.micro/categories/Z/regex.js","../node_modules/.pnpm/uc.micro@1.0.6/node_modules/uc.micro/index.js","../node_modules/.pnpm/uc.micro@1.0.6/node_modules/uc.micro/categories/Cf/regex.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/common/utils.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/helpers/parse_link_destination.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/helpers/parse_link_title.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/helpers/parse_link_label.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/renderer.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/ruler.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/normalize.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/linkify.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/replacements.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/smartquotes.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/token.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/state_core.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/parser_core.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/block.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/inline.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_core/text_join.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/table.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/blockquote.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/hr.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/list.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/reference.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/common/html_re.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/html_block.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/common/html_blocks.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/heading.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/state_block.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/parser_block.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/code.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/fence.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/lheading.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_block/paragraph.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/text.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/escape.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/linkify.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/newline.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/strikethrough.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/emphasis.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/link.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/image.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/autolink.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/html_inline.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/entity.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/balance_pairs.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/state_inline.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/parser_inline.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/backticks.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/rules_inline/fragments_join.js","../node_modules/.pnpm/linkify-it@4.0.1/node_modules/linkify-it/index.js","../node_modules/.pnpm/linkify-it@4.0.1/node_modules/linkify-it/lib/re.js","../node_modules/.pnpm/rollup-plugin-node-polyfills@0.2.1/node_modules/rollup-plugin-node-polyfills/polyfills/punycode.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/index.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/presets/default.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/presets/zero.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/lib/presets/commonmark.js","../node_modules/.pnpm/markdown-it@13.0.1/node_modules/markdown-it/index.js"],"sourcesContent":["// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3C /* < */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break; }\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) { return result; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1);\n        }\n\n        for (ln = 0; ln < links.length; ln++) {\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  [ 'text_join',      require('./rules_core/text_join')      ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n'use strict';\n\n\nmodule.exports = function text_join(state) {\n  var j, l, tokens, curr, max, last,\n      blockTokens = state.tokens;\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue;\n\n    tokens = blockTokens[j].children;\n    max = tokens.length;\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text';\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr]; }\n\n        last++;\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last;\n    }\n  }\n};\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.slice(pos, max);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      isOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // set offset past spaces and \">\"\n  initial = offset = state.sCount[startLine] + 1;\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    isOutdented = state.sCount[nextLine] < state.blkIndent;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      initial = offset = state.sCount[nextLine] + 1;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?][\\\\s\\\\S]*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch1, ch2, origStr, escapedStr, token, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false;\n  pos++;\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false;\n\n  ch1 = state.src.charCodeAt(pos);\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0);\n    }\n\n    pos++;\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos);\n      if (!isSpace(ch1)) break;\n      pos++;\n    }\n\n    state.pos = pos;\n    return true;\n  }\n\n  escapedStr = state.src[pos];\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    ch2 = state.src.charCodeAt(pos + 1);\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1];\n      pos++;\n    }\n  }\n\n  origStr = '\\\\' + escapedStr;\n\n  if (!silent) {\n    token = state.push('text_special', '', 0);\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr;\n    } else {\n      token.content = origStr;\n    }\n\n    token.markup = origStr;\n    token.info   = 'escape';\n  }\n\n  state.pos = pos + 1;\n  return true;\n};\n","// Process links like https://example.org/\n\n'use strict';\n\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nvar SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\n\n\nmodule.exports = function linkify(state, silent) {\n  var pos, max, match, proto, link, url, fullUrl, token;\n\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n\n  pos = state.pos;\n  max = state.posMax;\n\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false;\n\n  match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n\n  proto = match[1];\n\n  link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n\n  url = link.url;\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '');\n\n  fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n\n    token         = state.push('link_open', 'a', 1);\n    token.attrs   = [ [ 'href', fullUrl ] ];\n    token.markup  = 'linkify';\n    token.info    = 'auto';\n\n    token         = state.push('text', '', 0);\n    token.content = state.md.normalizeLinkText(url);\n\n    token         = state.push('link_close', 'a', -1);\n    token.markup  = 'linkify';\n    token.info    = 'auto';\n  }\n\n  state.pos += url.length - proto.length;\n  return true;\n};\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, ws, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.linkLevel++;\n    state.md.inline.tokenize(state);\n    state.linkLevel--;\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var url, fullUrl, token, ch, start, max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  start = state.pos;\n  max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n\n    ch = state.src.charCodeAt(pos);\n\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n\n  url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n\n    if (isLinkOpen(token.content))  state.linkLevel++;\n    if (isLinkClose(token.content)) state.linkLevel--;\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, token, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false;\n\n  if (pos + 1 >= max) return false;\n\n  ch = state.src.charCodeAt(pos + 1);\n\n  if (ch === 0x23 /* # */) {\n    match = state.src.slice(pos).match(DIGITAL_RE);\n    if (match) {\n      if (!silent) {\n        code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n\n        token         = state.push('text_special', '', 0);\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        token.markup  = match[0];\n        token.info    = 'entity';\n      }\n      state.pos += match[0].length;\n      return true;\n    }\n  } else {\n    match = state.src.slice(pos).match(NAMED_RE);\n    if (match) {\n      if (has(entities, match[1])) {\n        if (!silent) {\n          token         = state.push('text_special', '', 0);\n          token.content = entities[match[1]];\n          token.markup  = match[0];\n          token.info    = 'entity';\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  var headerIdx = 0;\n  var lastTokenIdx = -2; // needs any value lower than -1\n  var jumps = [];\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];\n\n    openerIdx = headerIdx - jumps[headerIdx] - 1;\n\n    newMinOpenerIdx = openerIdx;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (opener.open && opener.end < 0) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            jumps[openerIdx - 1] + 1 :\n            0;\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'linkify',         require('./rules_inline/linkify') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  [ 'fragments_join',  require('./rules_inline/fragments_join') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function fragments_join(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test     = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) return null;\n\n  var m = this.re.schema_at_start.exec(text);\n  if (!m) return null;\n\n  var len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null;\n\n  this.__schema__     = m[2];\n  this.__index__      = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n\n  return createMatch(this, 0);\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n  opts = opts || {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in \"google search\" links (#66, #81).\n                                     // github has ... in commit range links,\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // - params separator\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          ',(?!' + re.src_ZCc + '|$)|' +       // allow `,,,` in paths\n          ';(?!' + re.src_ZCc + '|$)|' +       // allow `;` if not followed by space-like char\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +  // allow `!!!` in paths, but not at the end\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n\n\n/** Highest positive signed 32-bit float value */\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128; // 0x80\nvar delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nvar regexPunycode = /^xn--/;\nvar regexNonASCII = /[^\\x20-\\x7E]/; // unprintable ASCII chars + non-ASCII chars\nvar regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nvar errors = {\n  'overflow': 'Overflow: input needs wider integers to process',\n  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n  'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n  throw new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n  var length = array.length;\n  var result = [];\n  while (length--) {\n    result[length] = fn(array[length]);\n  }\n  return result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n  var parts = string.split('@');\n  var result = '';\n  if (parts.length > 1) {\n    // In email addresses, only the domain name should be punycoded. Leave\n    // the local part (i.e. everything up to `@`) intact.\n    result = parts[0] + '@';\n    string = parts[1];\n  }\n  // Avoid `split(regex)` for IE8 compatibility. See #17.\n  string = string.replace(regexSeparators, '\\x2E');\n  var labels = string.split('.');\n  var encoded = map(labels, fn).join('.');\n  return result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n  var output = [],\n    counter = 0,\n    length = string.length,\n    value,\n    extra;\n  while (counter < length) {\n    value = string.charCodeAt(counter++);\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n      // high surrogate, and there is a next character\n      extra = string.charCodeAt(counter++);\n      if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n      } else {\n        // unmatched surrogate; only append this code unit, in case the next\n        // code unit is the high surrogate of a surrogate pair\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n  return output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nfunction ucs2encode(array) {\n  return map(array, function(value) {\n    var output = '';\n    if (value > 0xFFFF) {\n      value -= 0x10000;\n      output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n      value = 0xDC00 | value & 0x3FF;\n    }\n    output += stringFromCharCode(value);\n    return output;\n  }).join('');\n}\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nfunction basicToDigit(codePoint) {\n  if (codePoint - 48 < 10) {\n    return codePoint - 22;\n  }\n  if (codePoint - 65 < 26) {\n    return codePoint - 65;\n  }\n  if (codePoint - 97 < 26) {\n    return codePoint - 97;\n  }\n  return base;\n}\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nfunction digitToBasic(digit, flag) {\n  //  0..25 map to ASCII a..z or A..Z\n  // 26..35 map to ASCII 0..9\n  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n}\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nfunction adapt(delta, numPoints, firstTime) {\n  var k = 0;\n  delta = firstTime ? floor(delta / damp) : delta >> 1;\n  delta += floor(delta / numPoints);\n  for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {\n    delta = floor(delta / baseMinusTMin);\n  }\n  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n}\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nexport function decode(input) {\n  // Don't use UCS-2\n  var output = [],\n    inputLength = input.length,\n    out,\n    i = 0,\n    n = initialN,\n    bias = initialBias,\n    basic,\n    j,\n    index,\n    oldi,\n    w,\n    k,\n    digit,\n    t,\n    /** Cached calculation results */\n    baseMinusT;\n\n  // Handle the basic code points: let `basic` be the number of input code\n  // points before the last delimiter, or `0` if there is none, then copy\n  // the first basic code points to the output.\n\n  basic = input.lastIndexOf(delimiter);\n  if (basic < 0) {\n    basic = 0;\n  }\n\n  for (j = 0; j < basic; ++j) {\n    // if it's not a basic code point\n    if (input.charCodeAt(j) >= 0x80) {\n      error('not-basic');\n    }\n    output.push(input.charCodeAt(j));\n  }\n\n  // Main decoding loop: start just after the last delimiter if any basic code\n  // points were copied; start at the beginning otherwise.\n\n  for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */ ) {\n\n    // `index` is the index of the next character to be consumed.\n    // Decode a generalized variable-length integer into `delta`,\n    // which gets added to `i`. The overflow checking is easier\n    // if we increase `i` as we go, then subtract off its starting\n    // value at the end to obtain `delta`.\n    for (oldi = i, w = 1, k = base; /* no condition */ ; k += base) {\n\n      if (index >= inputLength) {\n        error('invalid-input');\n      }\n\n      digit = basicToDigit(input.charCodeAt(index++));\n\n      if (digit >= base || digit > floor((maxInt - i) / w)) {\n        error('overflow');\n      }\n\n      i += digit * w;\n      t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n      if (digit < t) {\n        break;\n      }\n\n      baseMinusT = base - t;\n      if (w > floor(maxInt / baseMinusT)) {\n        error('overflow');\n      }\n\n      w *= baseMinusT;\n\n    }\n\n    out = output.length + 1;\n    bias = adapt(i - oldi, out, oldi == 0);\n\n    // `i` was supposed to wrap around from `out` to `0`,\n    // incrementing `n` each time, so we'll fix that now:\n    if (floor(i / out) > maxInt - n) {\n      error('overflow');\n    }\n\n    n += floor(i / out);\n    i %= out;\n\n    // Insert `n` at position `i` of the output\n    output.splice(i++, 0, n);\n\n  }\n\n  return ucs2encode(output);\n}\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nexport function encode(input) {\n  var n,\n    delta,\n    handledCPCount,\n    basicLength,\n    bias,\n    j,\n    m,\n    q,\n    k,\n    t,\n    currentValue,\n    output = [],\n    /** `inputLength` will hold the number of code points in `input`. */\n    inputLength,\n    /** Cached calculation results */\n    handledCPCountPlusOne,\n    baseMinusT,\n    qMinusT;\n\n  // Convert the input in UCS-2 to Unicode\n  input = ucs2decode(input);\n\n  // Cache the length\n  inputLength = input.length;\n\n  // Initialize the state\n  n = initialN;\n  delta = 0;\n  bias = initialBias;\n\n  // Handle the basic code points\n  for (j = 0; j < inputLength; ++j) {\n    currentValue = input[j];\n    if (currentValue < 0x80) {\n      output.push(stringFromCharCode(currentValue));\n    }\n  }\n\n  handledCPCount = basicLength = output.length;\n\n  // `handledCPCount` is the number of code points that have been handled;\n  // `basicLength` is the number of basic code points.\n\n  // Finish the basic string - if it is not empty - with a delimiter\n  if (basicLength) {\n    output.push(delimiter);\n  }\n\n  // Main encoding loop:\n  while (handledCPCount < inputLength) {\n\n    // All non-basic code points < n have been handled already. Find the next\n    // larger one:\n    for (m = maxInt, j = 0; j < inputLength; ++j) {\n      currentValue = input[j];\n      if (currentValue >= n && currentValue < m) {\n        m = currentValue;\n      }\n    }\n\n    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n    // but guard against overflow\n    handledCPCountPlusOne = handledCPCount + 1;\n    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n      error('overflow');\n    }\n\n    delta += (m - n) * handledCPCountPlusOne;\n    n = m;\n\n    for (j = 0; j < inputLength; ++j) {\n      currentValue = input[j];\n\n      if (currentValue < n && ++delta > maxInt) {\n        error('overflow');\n      }\n\n      if (currentValue == n) {\n        // Represent delta as a generalized variable-length integer\n        for (q = delta, k = base; /* no condition */ ; k += base) {\n          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n          if (q < t) {\n            break;\n          }\n          qMinusT = q - t;\n          baseMinusT = base - t;\n          output.push(\n            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n          );\n          q = floor(qMinusT / baseMinusT);\n        }\n\n        output.push(stringFromCharCode(digitToBasic(q, 0)));\n        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n        delta = 0;\n        ++handledCPCount;\n      }\n    }\n\n    ++delta;\n    ++n;\n\n  }\n  return output.join('');\n}\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nexport function toUnicode(input) {\n  return mapDomain(input, function(string) {\n    return regexPunycode.test(string) ?\n      decode(string.slice(4).toLowerCase()) :\n      string;\n  });\n}\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nexport function toASCII(input) {\n  return mapDomain(input, function(string) {\n    return regexNonASCII.test(string) ?\n      'xn--' + encode(string) :\n      string;\n  });\n}\nexport var version = '1.4.1';\n/**\n * An object of methods to convert from JavaScript's internal character\n * representation (UCS-2) to Unicode code points, and back.\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode\n * @type Object\n */\n\nexport var ucs2 = {\n  decode: ucs2decode,\n  encode: ucs2encode\n};\nexport default {\n  version: version,\n  ucs2: ucs2,\n  toASCII: toASCII,\n  toUnicode: toUnicode,\n  encode: encode,\n  decode: decode\n}\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n};\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n"],"names":["entities","regex","encodeCache","encode","string","exclude","keepEscaped","i","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","encode_1","decodeCache","decode","getDecodeCache","replace","seq","b1","b2","b3","b4","chr","parseInt","decode_1","Url","this","protocol","slashes","auth","port","hostname","hash","search","pathname","protocolPattern","portPattern","simplePathPattern","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","javascript:","slashedProtocol","http","https","ftp","gopher","file","http:","https:","ftp:","gopher:","file:","prototype","parse","url","slashesDenoteHost","lowerProto","hec","rest","trim","split","simplePath","exec","proto","toLowerCase","substr","match","atSign","hostEnd","indexOf","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","j","k","validParts","notHost","bit","unshift","join","qm","u","require$$0","require$$1","require$$3","require$$4","_hasOwnProperty","Object","hasOwnProperty","has","object","key","call","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","&","<",">","\"","replaceUnsafeChar","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","exports","lib","mdurl","require$$2","ucmicro","obj","sources","Array","arguments","forEach","TypeError","keys","_class","str","escaped","entity","name","replaceEntityPattern","src","pos","newElements","unescapeAll","state","start","disableNested","level","found","marker","prevPos","labelEnd","max","posMax","oldPos","md","inline","skipToken","ok","lines","assign","escapeHtml","default_rules","Renderer","rules","code_inline","tokens","idx","options","env","slf","token","renderAttrs","content","code_block","fence","highlighted","arr","tmpAttrs","tmpToken","info","langName","langAttrs","highlight","attrIndex","attrs","langPrefix","image","renderInlineAsText","children","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","nextToken","needLf","hidden","block","nesting","tag","type","renderInline","len","render","renderer","Ruler","__rules__","__cache__","__find__","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","index","opt","Error","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","isArray","enableOnly","disable","getRules","chainName","ruler","NEWLINES_RE","NULL_RE","arrayReplaceAt","isLinkClose","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","isWhiteSpace","isPunctChar","isMdAsciiPunct","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","t","thisLevel","item","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","lastIndex","single","quotes","Token","map","markup","meta","attrPush","attrData","attrSet","value","attrGet","attrJoin","StateCore","inlineMode","state_core","_rules","tok","currentToken","nodes","ln","lastPos","htmlLinkLevel","fullUrl","urlText","links","blockTokens","linkify","pretest","normalizeLink","validateLink","schema","normalizeLinkText","blkIdx","typographer","curr","last","Core","process","State","require$$8","parser_core","isSpace","getLine","line","bMarks","tShift","eMarks","escapedSplit","isEscaped","current","substring","skipBulletListMarker","startLine","skipOrderedListMarker","normalizeReference","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","block_names","HTML_SEQUENCES","StateBlock","s","indent","offset","indent_found","sCount","bsCount","blkIndent","lineMax","tight","ddIndent","listIndent","parentType","isEmpty","skipEmptyLines","from","skipSpaces","skipSpacesBack","min","skipChars","skipCharsBack","getLines","begin","end","keepLastLF","lineIndent","first","queue","lineStart","state_block","endLine","silent","lineText","nextLine","columns","columnCount","aligns","tableLines","tbodyLines","oldParentType","terminate","terminatorRules","firstCh","secondCh","shift","pop","params","mem","haveEndMarker","adjustTab","initial","lastLineEmpty","oldBMarks","oldBSCount","oldIndent","oldSCount","oldTShift","spaceAfterMarker","isOutdented","oldLineMax","tokenize","cnt","contentStart","indentAfterMarker","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","oldListIndent","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","Number","Math","markTightParagraphs","_endLine","destEndPos","destEndLineNo","href","label","res","title","helpers","parseLinkDestination","parseLinkTitle","references","html","tmp","ParserBlock","hasEmptyLines","maxNesting","outTokens","require$$12","parser_block","isTerminatorChar","SCHEME_RE","ESCAPED","postProcess","delimiters","startDelim","endDelim","loneMarkers","scanned","scanDelims","open","can_open","close","can_close","tokens_meta","isStrong","EMAIL_RE","AUTOLINK_RE","DIGITAL_RE","NAMED_RE","processDelimiters","closerIdx","openerIdx","closer","opener","minOpenerIdx","newMinOpenerIdx","isOddMatch","lastJump","openersBottom","headerIdx","lastTokenIdx","jumps","StateInline","pending","pendingLevel","_prev_delimiters","backticks","backticksScanned","linkLevel","pushPending","token_meta","canSplitWord","count","left_flanking","right_flanking","state_inline","link","matchAtStart","pmax","ws","ch1","ch2","origStr","escapedStr","matchStart","matchEnd","openerLength","closerLength","require$$6","require$$7","labelStart","ref","parseReference","parseLinkLabel","lc","isLetter","_rules2","ParserInline","ruler2","require$$15","parser_inline","isFunction","escapeRE","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","tail","re","src_auth","src_host_port_strict","src_path","//","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto:","mailto","src_email_name","src_host_strict","tlds_default","compile","opts","src_Any","src_Cc","src_Z","src_P","src_ZPCc","src_ZCc","src_pseudo_letter","src_ip4","src_xn","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","isRegExp","createValidator","normalize","isString","alias","slist","filter","schema_test","schema_search","schema_at_start","__index__","__text_cache__","resetScanCache","Match","__last_index__","__schema__","raw","createMatch","LinkifyIt","schemas","reduce","acc","add","definition","set","m","ml","me","next","tld_pos","testSchemaAt","keepOld","sort","el","reverse","linkifyIt","maxInt","regexPunycode","regexNonASCII","regexSeparators","errors","overflow","not-basic","invalid-input","floor","stringFromCharCode","error","RangeError","array","mapDomain","parts","ucs2decode","extra","output","counter","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","baseMinusTMin","base","input","out","basic","oldi","w","baseMinusT","codePoint","inputLength","n","bias","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","toUnicode","toASCII","ucs2","version","utils","ParserCore","require$$5","punycode","config","default","components","core","zero","rules2","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","RECODE_HOSTNAME_FOR","parsed","er","format","MarkdownIt","presetName","configure","presets","missed","use","plugin","args","apply","parseInline","markdownIt"],"mappings":"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"}
